"""Question-related value objects."""

from enum import Enum
from typing import Set


class QuestionType(str, Enum):
    """Types of questions in the system."""

    MCQ = "mcq"  # Multiple choice question
    THEORY = "theory"  # Theory/concept question
    SCENARIO = "scenario"  # Scenario-based question

    def requires_options(self) -> bool:
        """Check if this question type requires options."""
        return self == QuestionType.MCQ

    def supports_auto_grading(self) -> bool:
        """Check if this question type supports automatic grading."""
        return self == QuestionType.MCQ

    def default_time_seconds(self) -> int:
        """Get default time allocation in seconds."""
        times = {
            QuestionType.MCQ: 60,
            QuestionType.THEORY: 300,
            QuestionType.SCENARIO: 600,
        }
        return times[self]


class QuestionSource(str, Enum):
    """Source of questions in the system."""

    HARD_RESOURCE = "hard_resource"  # Phase 1: Imported from JSON
    USER_GENERATED = "user_generated"  # Phase 2: Created by users
    AI_GENERATED = "ai_generated"  # Phase 2: Generated by AI
    ADMIN_IMPORTED = "admin_imported"  # Phase 2: Imported by admin
    COMMUNITY = "community"  # Phase 3: Community contributed

    def is_trusted(self) -> bool:
        """Check if this source is trusted for auto-approval."""
        return self in {
            QuestionSource.HARD_RESOURCE,
            QuestionSource.ADMIN_IMPORTED
        }

    def requires_moderation(self) -> bool:
        """Check if questions from this source need moderation."""
        return self in {
            QuestionSource.USER_GENERATED,
            QuestionSource.COMMUNITY
        }