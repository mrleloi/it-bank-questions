# Generated by Django 5.2.5 on 2025-08-25 07:00

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="FacetModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("code", models.CharField(db_index=True, max_length=100)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("order_index", models.IntegerField(db_index=True, default=0)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "question_types",
                    models.JSONField(
                        blank=True, default=list, verbose_name=models.CharField(max_length=20)
                    ),
                ),
                ("difficulty_distribution", models.JSONField(default=dict)),
                ("total_questions", models.IntegerField(default=0)),
                ("total_learners", models.IntegerField(default=0)),
                ("average_mastery", models.FloatField(default=0.0)),
            ],
            options={
                "db_table": "facets",
                "ordering": ["order_index", "name"],
            },
        ),
        migrations.CreateModel(
            name="LeafModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("code", models.CharField(db_index=True, max_length=100)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("order_index", models.IntegerField(db_index=True, default=0)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("total_questions", models.IntegerField(default=0)),
                ("total_learners", models.IntegerField(default=0)),
                ("average_mastery", models.FloatField(default=0.0)),
            ],
            options={
                "db_table": "leaves",
                "ordering": ["order_index", "name"],
            },
        ),
        migrations.CreateModel(
            name="SubtopicModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("code", models.CharField(db_index=True, max_length=100)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("order_index", models.IntegerField(db_index=True, default=0)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("total_questions", models.IntegerField(default=0)),
                ("total_learners", models.IntegerField(default=0)),
                ("average_mastery", models.FloatField(default=0.0)),
            ],
            options={
                "db_table": "subtopics",
                "ordering": ["order_index", "name"],
            },
        ),
        migrations.CreateModel(
            name="TopicModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("code", models.CharField(db_index=True, max_length=100, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("color", models.CharField(blank=True, max_length=7)),
                ("order_index", models.IntegerField(db_index=True, default=0)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("total_questions", models.IntegerField(default=0)),
                ("total_learners", models.IntegerField(default=0)),
                ("average_mastery", models.FloatField(default=0.0)),
                ("estimated_hours", models.IntegerField(default=0)),
            ],
            options={
                "db_table": "topics",
                "ordering": ["order_index", "name"],
            },
        ),
        migrations.CreateModel(
            name="UserModel",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_deleted", models.BooleanField(db_index=True, default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        max_length=50,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(3)],
                    ),
                ),
                ("password", models.CharField(max_length=255)),
                ("full_name", models.CharField(blank=True, max_length=255)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("learner", "Learner"),
                            ("moderator", "Moderator"),
                            ("admin", "Admin"),
                            ("guest", "Guest"),
                        ],
                        db_index=True,
                        default="learner",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("banned", "Banned"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("email_verified_at", models.DateTimeField(blank=True, null=True)),
                ("email_verification_token", models.CharField(blank=True, max_length=100)),
                ("last_login_at", models.DateTimeField(blank=True, null=True)),
                ("last_activity_at", models.DateTimeField(blank=True, null=True)),
                ("total_study_time_seconds", models.IntegerField(default=0)),
                ("total_questions_answered", models.IntegerField(default=0)),
                ("current_streak_days", models.IntegerField(default=0)),
                ("longest_streak_days", models.IntegerField(default=0)),
                ("achievement_points", models.IntegerField(default=0)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="FacetProgressModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("total_questions", models.IntegerField(default=0)),
                ("seen_questions", models.IntegerField(default=0)),
                ("mastered_questions", models.IntegerField(default=0)),
                (
                    "mastery_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("accuracy_rate", models.FloatField(default=0.0)),
                ("average_response_time", models.FloatField(default=0.0)),
                (
                    "difficulty_comfort",
                    models.FloatField(
                        default=3.0,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("last_activity_at", models.DateTimeField(blank=True, null=True)),
                ("total_time_spent_seconds", models.IntegerField(default=0)),
                ("current_streak_days", models.IntegerField(default=0)),
                ("longest_streak_days", models.IntegerField(default=0)),
                ("last_streak_date", models.DateField(blank=True, null=True)),
                ("metrics", models.JSONField(default=dict)),
                (
                    "facet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="persistence.facetmodel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facet_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "facet_progress",
            },
        ),
        migrations.AddField(
            model_name="facetmodel",
            name="leaf",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="facets",
                to="persistence.leafmodel",
            ),
        ),
        migrations.CreateModel(
            name="LearningSessionModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("abandoned", "Abandoned"),
                        ],
                        db_index=True,
                        default="active",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("last_activity_at", models.DateTimeField(auto_now=True)),
                ("question_limit", models.IntegerField(blank=True, null=True)),
                ("time_limit_minutes", models.IntegerField(blank=True, null=True)),
                (
                    "question_types",
                    models.JSONField(
                        blank=True, default=list, verbose_name=models.CharField(max_length=20)
                    ),
                ),
                ("difficulty_min", models.IntegerField(default=1)),
                ("difficulty_max", models.IntegerField(default=5)),
                ("question_queue", models.JSONField(default=list)),
                ("answered_questions", models.JSONField(default=list)),
                ("current_question_id", models.UUIDField(blank=True, null=True)),
                ("current_question_started_at", models.DateTimeField(blank=True, null=True)),
                ("total_questions", models.IntegerField(default=0)),
                ("answered_questions_count", models.IntegerField(default=0)),
                ("correct_answers", models.IntegerField(default=0)),
                ("total_time_seconds", models.IntegerField(default=0)),
                ("active_time_seconds", models.IntegerField(default=0)),
                ("metrics", models.JSONField(default=dict)),
                (
                    "facet",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sessions",
                        to="persistence.facetmodel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "learning_sessions",
            },
        ),
        migrations.CreateModel(
            name="QuestionModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("external_id", models.CharField(db_index=True, max_length=255, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("mcq", "Multiple Choice"),
                            ("theory", "Theory"),
                            ("scenario", "Scenario"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("question", models.TextField()),
                (
                    "difficulty_level",
                    models.IntegerField(
                        db_index=True,
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("hard_resource", "Hard Resource"),
                            ("user_generated", "User Generated"),
                            ("ai_generated", "AI Generated"),
                            ("admin_imported", "Admin Imported"),
                        ],
                        db_index=True,
                        default="hard_resource",
                        max_length=50,
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        db_index=True,
                        default=list,
                        verbose_name=models.CharField(max_length=50),
                    ),
                ),
                ("estimated_time_seconds", models.IntegerField(blank=True, null=True)),
                ("sample_answer", models.TextField(blank=True, null=True)),
                ("evaluation_criteria", models.TextField(blank=True, null=True)),
                ("hints", models.JSONField(default=list)),
                (
                    "references",
                    models.JSONField(blank=True, default=list, verbose_name=models.URLField()),
                ),
                (
                    "learning_objectives",
                    models.JSONField(
                        blank=True, default=list, verbose_name=models.CharField(max_length=255)
                    ),
                ),
                (
                    "prerequisites",
                    models.JSONField(
                        blank=True, default=list, verbose_name=models.CharField(max_length=255)
                    ),
                ),
                ("times_answered", models.IntegerField(default=0)),
                ("times_correct", models.IntegerField(default=0)),
                ("average_time_seconds", models.FloatField(blank=True, null=True)),
                ("success_rate", models.FloatField(blank=True, null=True)),
                ("ai_generated", models.BooleanField(default=False)),
                ("ai_difficulty_assessment", models.FloatField(blank=True, null=True)),
                ("community_rating", models.FloatField(blank=True, null=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("needs_review", models.BooleanField(default=False)),
                ("metadata", models.JSONField(default=dict)),
                (
                    "facet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="persistence.facetmodel",
                    ),
                ),
            ],
            options={
                "db_table": "questions",
            },
        ),
        migrations.CreateModel(
            name="MCQOptionModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("option_key", models.CharField(max_length=10)),
                ("option_text", models.TextField()),
                ("is_correct", models.BooleanField(default=False)),
                ("explanation", models.TextField(blank=True)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mcq_options",
                        to="persistence.questionmodel",
                    ),
                ),
            ],
            options={
                "db_table": "mcq_options",
                "ordering": ["option_key"],
            },
        ),
        migrations.CreateModel(
            name="LearningEventModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("session_started", "Session Started"),
                            ("session_completed", "Session Completed"),
                            ("session_abandoned", "Session Abandoned"),
                            ("question_viewed", "Question Viewed"),
                            ("question_answered", "Question Answered"),
                            ("question_skipped", "Question Skipped"),
                            ("hint_requested", "Hint Requested"),
                            ("card_reviewed", "Card Reviewed"),
                            ("card_suspended", "Card Suspended"),
                            ("card_buried", "Card Buried"),
                            ("facet_completed", "Facet Completed"),
                            ("facet_mastered", "Facet Mastered"),
                            ("achievement_unlocked", "Achievement Unlocked"),
                            ("streak_updated", "Streak Updated"),
                            ("user_registered", "User Registered"),
                            ("user_login", "User Login"),
                            ("user_logout", "User Logout"),
                            ("settings_updated", "Settings Updated"),
                            ("ai_hint_generated", "AI Hint Generated"),
                            ("ai_feedback_provided", "AI Feedback Provided"),
                            ("ai_chat_message", "AI Chat Message"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                ("event_data", models.JSONField(default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("device_type", models.CharField(blank=True, max_length=50)),
                (
                    "facet",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="persistence.facetmodel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="persistence.learningsessionmodel",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="persistence.questionmodel",
                    ),
                ),
            ],
            options={
                "db_table": "learning_events",
            },
        ),
        migrations.CreateModel(
            name="SpacedRepetitionCardModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("learning", "Learning"),
                            ("review", "Review"),
                            ("relearning", "Relearning"),
                            ("suspended", "Suspended"),
                            ("buried", "Buried"),
                        ],
                        db_index=True,
                        default="new",
                        max_length=20,
                    ),
                ),
                ("ease_factor", models.FloatField(default=2.5)),
                ("interval_days", models.IntegerField(default=0)),
                ("due_date", models.DateTimeField(db_index=True)),
                ("learning_step", models.IntegerField(default=0)),
                ("last_reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("total_reviews", models.IntegerField(default=0)),
                ("total_correct", models.IntegerField(default=0)),
                ("total_time_seconds", models.IntegerField(default=0)),
                ("lapses", models.IntegerField(default=0)),
                ("last_ease_factor", models.FloatField(default=2.5)),
                ("last_interval_days", models.IntegerField(default=0)),
                ("review_config", models.JSONField(default=dict)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spaced_cards",
                        to="persistence.questionmodel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spaced_cards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "spaced_repetition_cards",
            },
        ),
        migrations.AddField(
            model_name="leafmodel",
            name="subtopic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="leaves",
                to="persistence.subtopicmodel",
            ),
        ),
        migrations.AddField(
            model_name="subtopicmodel",
            name="topic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="subtopics",
                to="persistence.topicmodel",
            ),
        ),
        migrations.CreateModel(
            name="UserPreferencesModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("theme", models.CharField(default="light", max_length=20)),
                ("language", models.CharField(default="en", max_length=10)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("email_notifications", models.BooleanField(default=True)),
                ("push_notifications", models.BooleanField(default=True)),
                ("daily_reminder", models.BooleanField(default=True)),
                ("reminder_time", models.TimeField(default="09:00")),
                ("daily_goal", models.IntegerField(default=20)),
                ("auto_play_audio", models.BooleanField(default=False)),
                ("show_timer", models.BooleanField(default=True)),
                ("enable_hints", models.BooleanField(default=True)),
                (
                    "difficulty_preference",
                    models.CharField(
                        choices=[
                            ("adaptive", "Adaptive"),
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                        ],
                        default="adaptive",
                        max_length=20,
                    ),
                ),
                ("review_settings", models.JSONField(default=dict)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_preferences",
            },
        ),
        migrations.CreateModel(
            name="UserProgressModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("total_study_time_seconds", models.IntegerField(default=0)),
                ("total_questions_answered", models.IntegerField(default=0)),
                ("total_correct_answers", models.IntegerField(default=0)),
                ("overall_mastery_score", models.FloatField(default=0.0)),
                ("achievements_unlocked", models.JSONField(default=list)),
                ("achievement_points", models.IntegerField(default=0)),
                ("preferred_study_time", models.CharField(blank=True, max_length=20)),
                ("average_session_length_minutes", models.FloatField(default=0.0)),
                ("most_productive_day", models.CharField(blank=True, max_length=20)),
                ("analytics", models.JSONField(default=dict)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="overall_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_progress",
            },
        ),
        migrations.CreateModel(
            name="UserResponseModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("response_text", models.TextField(blank=True)),
                ("selected_option", models.CharField(blank=True, max_length=10)),
                ("is_correct", models.BooleanField(null=True)),
                (
                    "difficulty_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "confidence_level",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("time_spent_seconds", models.IntegerField(default=0)),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("hints_used", models.IntegerField(default=0)),
                (
                    "hint_levels",
                    models.JSONField(blank=True, default=list, verbose_name=models.IntegerField()),
                ),
                ("ai_score", models.FloatField(blank=True, null=True)),
                ("ai_feedback", models.TextField(blank=True)),
                ("metadata", models.JSONField(default=dict)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_responses",
                        to="persistence.questionmodel",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="persistence.learningsessionmodel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_responses",
            },
        ),
        migrations.AddIndex(
            model_name="usermodel",
            index=models.Index(fields=["email", "status"], name="users_email_f7aa6a_idx"),
        ),
        migrations.AddIndex(
            model_name="usermodel",
            index=models.Index(fields=["username", "status"], name="users_usernam_eabeca_idx"),
        ),
        migrations.AddIndex(
            model_name="usermodel",
            index=models.Index(fields=["role", "status"], name="users_role_bc23be_idx"),
        ),
        migrations.AddIndex(
            model_name="facetprogressmodel",
            index=models.Index(
                fields=["user", "mastery_score"], name="facet_progr_user_id_0e1148_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="facetprogressmodel",
            index=models.Index(
                fields=["user", "last_activity_at"], name="facet_progr_user_id_aab7e4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="facetprogressmodel",
            unique_together={("user", "facet")},
        ),
        migrations.AlterUniqueTogether(
            name="facetmodel",
            unique_together={("leaf", "code")},
        ),
        migrations.AddIndex(
            model_name="learningsessionmodel",
            index=models.Index(fields=["user", "status"], name="learning_se_user_id_d61245_idx"),
        ),
        migrations.AddIndex(
            model_name="learningsessionmodel",
            index=models.Index(
                fields=["user", "started_at"], name="learning_se_user_id_4e538f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="learningsessionmodel",
            index=models.Index(fields=["facet", "status"], name="learning_se_facet_i_0a96d4_idx"),
        ),
        migrations.AddIndex(
            model_name="questionmodel",
            index=models.Index(fields=["facet", "type"], name="questions_facet_i_f4b04a_idx"),
        ),
        migrations.AddIndex(
            model_name="questionmodel",
            index=models.Index(
                fields=["facet", "difficulty_level"], name="questions_facet_i_2c23ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="questionmodel",
            index=models.Index(fields=["source", "is_active"], name="questions_source_0756e3_idx"),
        ),
        migrations.AddIndex(
            model_name="questionmodel",
            index=models.Index(fields=["external_id"], name="questions_externa_6f0149_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="mcqoptionmodel",
            unique_together={("question", "option_key")},
        ),
        migrations.AddIndex(
            model_name="learningeventmodel",
            index=models.Index(
                fields=["user", "event_type", "created_at"], name="learning_ev_user_id_e0b69e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="learningeventmodel",
            index=models.Index(
                fields=["event_type", "created_at"], name="learning_ev_event_t_ac218e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="learningeventmodel",
            index=models.Index(
                fields=["session", "created_at"], name="learning_ev_session_c901ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="spacedrepetitioncardmodel",
            index=models.Index(fields=["user", "due_date"], name="spaced_repe_user_id_81303e_idx"),
        ),
        migrations.AddIndex(
            model_name="spacedrepetitioncardmodel",
            index=models.Index(fields=["user", "state"], name="spaced_repe_user_id_3fe644_idx"),
        ),
        migrations.AddIndex(
            model_name="spacedrepetitioncardmodel",
            index=models.Index(fields=["user", "question"], name="spaced_repe_user_id_25adb5_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="spacedrepetitioncardmodel",
            unique_together={("user", "question")},
        ),
        migrations.AlterUniqueTogether(
            name="leafmodel",
            unique_together={("subtopic", "code")},
        ),
        migrations.AlterUniqueTogether(
            name="subtopicmodel",
            unique_together={("topic", "code")},
        ),
        migrations.AddIndex(
            model_name="userresponsemodel",
            index=models.Index(fields=["user", "question"], name="user_respon_user_id_b3752d_idx"),
        ),
        migrations.AddIndex(
            model_name="userresponsemodel",
            index=models.Index(
                fields=["session", "created_at"], name="user_respon_session_8c4dcc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userresponsemodel",
            index=models.Index(
                fields=["user", "is_correct"], name="user_respon_user_id_1bf413_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userresponsemodel",
            unique_together={("user", "question", "session")},
        ),
    ]
